pipeline {
    agent { label "GoNode" }

    environment {
        DOCKERHUB_CREDENTIALS = '6056e3e4-1d9d-4240-8e14-48bf5ffea0b6'
        DB_NAME = credentials('810400aa-d4f0-4b9c-9921-3dc18bc1b775')
        DB_USER = credentials('014e187e-d68b-497d-b75b-e6954d141c0a')
        DB_PASS = credentials('73de1c18-1d33-4917-b054-17b9e852e3b6')
        DB_HOST = credentials('99d36a86-ce4b-4a0c-9ec3-9af9a80e4acc')
        DB_PORT = credentials('11c805e6-a9d9-4f7f-a37e-450b9c70665a')
        SECRET_KEY = credentials('5db7ba70-428c-43cf-b351-6feee10f8f83')
    }

    stages {
        stage('Remove old build') {
            steps {
                sh 'docker stop golibrarybackend || true'
                sh 'docker rm golibrarybackend || true'
                sh 'docker system prune -af'
            }
        }

        stage('Build') {
            steps {
                checkout scm
                sh 'docker build -t golibrarybackend .'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh 'docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD'
                    sh 'docker tag golibrarybackend joemuldowney/virtual_library_cart'
                    sh 'docker push joemuldowney/virtual_library_cart'
                }
            }
        }

        stage('Deploy on server') {
            steps {
                sh 'docker run -d -p 8020:8020 --name golibrarybackend \
                -e DB_NAME=$DB_NAME \
                -e DB_USER=$DB_USER \
                -e DB_PASS=$DB_PASS \
                -e DB_PORT=$DB_PORT \
                -e DB_HOST=$DB_HOST \
                -e SECRET_KEY=$SECRET_KEY \
                joemuldowney/virtual_library_cart'
            }
        }
    }
}